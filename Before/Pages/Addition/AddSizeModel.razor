@inject BlazorService BlazorService

<div class="modal" style="display:@(IsVisible ? "block" : "none");">
    <div class="modal-backdrop" @onclick="ToggleModal"></div>
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="@ModelSize" OnValidSubmit="@OnSubmit">
                <div>
                    <label>Size: </label>
                    <InputSelect @bind-Value="ModelSize.Id">
                        @foreach (var size in BlazorService.Sizes)
                        {
                            <option value="@size.Id">@size.Name</option>
                        }
                    </InputSelect>
                </div>
                <button type="submit">Add</button>
                <button type="reset" @onclick="Hide">Close</button>
            </EditForm>

        </div>
    </div>
</div>

@code {
    private Size ModelSize = new();
    private bool IsVisible { get; set; } = false;

    [Parameter] public EventCallback<string> OnSize { get; set; }

    private async Task OnSubmit()
    {
        var selectedSize = BlazorService.Sizes.FirstOrDefault(s => s.Id == ModelSize.Id);
        await OnSize.InvokeAsync(selectedSize.Name);
        ToggleModal();
    }

    public void ToggleModal()
    {
        ModelSize = new();
        IsVisible = !IsVisible;
        StateHasChanged();
    }
    public void Hide()
    {
        IsVisible = !IsVisible;
        StateHasChanged();
    }
}