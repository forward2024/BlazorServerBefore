@inherits ComponentBase
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject BlazorService BlazorService

<div class="image-slider">
    @foreach (var (item, index) in Images.Select((value, index) => (value, index)))
    {
        <img src="@item" class="slider-image @(index == currentImageIndex ? "active" : (index == previousImageIndex ? "previous" : "next"))" />
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public int Index { get; set; }
    [Parameter] public List<string> Images { get; set; }

    private int currentImageIndex = 0;
    private int previousImageIndex = -1;
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StartSliderAsync();
        }
    }

    private async Task StartSliderAsync()
    {
        await Task.Run(async () =>
        {
            try
            {
                await Task.Delay(Index * 250, cancellationTokenSource.Token);
                while (!cancellationTokenSource.Token.IsCancellationRequested)
                {
                    await InvokeAsync(NextImage);
                    await Task.Delay(4000, cancellationTokenSource.Token);
                }
            }
            catch (OperationCanceledException)
            {
                
            }
        });
    }

    private void NextImage()
    {
        int imageCount = Images.Count;
        if (imageCount == 0) return;

        previousImageIndex = currentImageIndex;
        currentImageIndex = (currentImageIndex + 1) % imageCount;
        StateHasChanged();
    }

    public void Dispose()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
    }
}