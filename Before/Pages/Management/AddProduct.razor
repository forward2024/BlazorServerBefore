@inject NavigationManager NavigationManager
@inject BlazorService BlazorService
@inject HttpClient HttpClient
@inject IProduct ProductService
@inject ICategory CategoryService
@inject IJSRuntime JsRuntime
@page "/addProduct"


<h3>Add Product</h3>

<EditForm Model="@product" OnValidSubmit="@AddProductAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="@product.Name" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="@product.Description" />
    </div>

    <div class="form-group">
        <label for="price">Price:</label>
        <InputNumber id="price" class="form-control" @bind-Value="@product.Price" />
    </div>

    <div class="form-group">
        <label for="action">Action:</label>
        <InputNumber id="action" class="form-control" @bind-Value="@product.Action" />
    </div>

    <div class="form-group">
        <label for="imageFiles">Image Files:</label>
        <InputFile id="imageFiles" multiple OnChange="@OnImageFilesSelected" />
        @if (selectedFiles.Count > 0)
        {
            <a @onclick="ClearImage" class="btn btn-danger">Очистить список фотографий</a>
        }
    </div>

    <div class="form-group">
        <label for="category">Category:</label>
        <InputSelect id="category" class="form-control" @bind-Value="@product.CategoryId">
            @foreach (var category in BlazorService.Categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="typeitem">Type item:</label>
        <InputSelect id="typeitem" class="form-control" @bind-Value="@product.TypeItemId">
            @foreach (var typeItem in BlazorService.TypeItems)
            {
                <option value="@typeItem.Id">@typeItem.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="seller">Seller:</label>
        <InputSelect id="seller" class="form-control" @bind-Value="@product.SellerId">
            @foreach (var seller in BlazorService.Sellers)
            {
                <option value="@seller.Id">@seller.Name</option>
            }
        </InputSelect>
    </div>

    @if (product.Seasons.Any())
    {
        <div class="form-group">
            <label>Сезони</label>
            <ul>
                @foreach (var season in product.Seasons)
                {
                    <li>
                        @season
                        <button type="button" @onclick="() => RemoveSeason(season)">Видалити</button>
                    </li>
                }
            </ul>
        </div>
    }
    <div class="form-group">
        <button type="button" @onclick="OpenAddSeason">Add Season</button>
    </div>

    @if (product.Sizes.Any())
    {
        <div class="form-group">
            <label>Розміри:</label>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Розмір</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var size in product.Sizes)
                    {
                        <tr>
                            <td>@size</td>
                            <td><button type="button" @onclick="() => RemoveSize(size)">Видалити</button></td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    }
    <div class="form-group">
        <button type="button" @onclick="OpenAddSize">Add Size</button>
    </div>

    @if (product.Colors.Any())
    {
        <div class="form-group">
            <label>Кольори:</label>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var color in product.Colors)
                    {
                        <tr>
                            <td style="background-color: @color; width: 100px; height: 30px;"></td>
                            <td><button type="button" @onclick="() => RemoveSize(color)">Видалити</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    <div class="form-group">
        <button type="button" @onclick="OpenAddColor">Add Color</button>
    </div>

    <AddModelPanel Label="@Label" IsVisible="@IsVisible" IsVisibleChanged="HandleIsVisibleChanged" OptionsList="@OptionsList"
                   OnOptionAdded="@OnOptionAdded" OnCancel="@Hide" DisplayType="@Type" />


    <button type="submit" class="btn btn-primary" disabled="@(selectedFiles.Count > 10)">Add Product</button>
</EditForm>

@code {
    private Product product = new();
    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();


    private async Task AddProductAsync()
    {
        foreach (var file in selectedFiles)
        {
            using (var stream = file.OpenReadStream())
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var fileBytes = memoryStream.ToArray();
                var base64ImageRepresentation = Convert.ToBase64String(fileBytes);

                product.Images.Add($"data:image/jpeg;base64,{base64ImageRepresentation}");
            }
        }

        await ProductService.AddProductAsync(product);

        selectedFiles.Clear();
        NavigationManager.NavigateTo("/ControlPanel");
    }

    private async Task OnImageFilesSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var files = e.GetMultipleFiles().ToList();
            if (files.Count > 10)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Максимальна кількість файлів - 10");
            }
            else
            {
                selectedFiles.AddRange(files);
            }
        }
        catch (InvalidOperationException)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Ви вибрали забагато файлів. Максимальна кількість - 10.");
            selectedFiles.Clear();
        }
        StateHasChanged();
    }



    private async Task ClearImage()
    {
        selectedFiles.Clear();
        StateHasChanged();
    }



    private bool IsVisible { get; set; } = false;
    private string Label { get; set; }
    private string Type { get; set; }
    private List<string> OptionsList { get; set; } = new List<string>();
    private Action<string> OnOptionAdded { get; set; }

    public void ShowModal(string label, List<string> optionsList, Action<string> onOptionAdded, string type = "text")
    {
        Label = label;
        OptionsList = optionsList ?? new List<string>();
        OnOptionAdded = onOptionAdded;
        IsVisible = true;
        Type = type;
    }

    void OpenAddColor() => ShowModal("Add Color", BlazorService.Colors.Select(c => c.Name).ToList(), AddColor, "color");
    void OpenAddSize() => ShowModal("Add Size", BlazorService.Sizes.Select(s => s.Name).ToList(), AddSize);
    void OpenAddSeason() => ShowModal("Add Season", BlazorService.Seasons.Select(s => s.Name).ToList(), AddSeason);

    private void AddColor(string color) => AddToListInProduct(color, product.Colors);
    private void AddSize(string size) => AddToListInProduct(size, product.Sizes);
    private void AddSeason(string season) => AddToListInProduct(season, product.Seasons);
    private void AddToListInProduct(string item, HashSet<string> list)
    {
        if (!string.IsNullOrWhiteSpace(item))
            list.Add(item);
    }
    public void Hide() => IsVisible = false;
    void HandleIsVisibleChanged(bool isVisible) => IsVisible = isVisible;

    private void RemoveSize(string size) => product.Sizes.Remove(size);
    private void RemoveColor(string color) => product.Colors.Remove(color);
    private void RemoveSeason(string season) => product.Seasons.Remove(season);
}