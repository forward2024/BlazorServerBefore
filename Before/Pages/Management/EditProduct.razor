@page "/editproduct/{Id:int}"
@inject BlazorService BlazorService
@inject NavigationManager NavigationManager
@inject IProduct ProductService

<h3 class="page-title">Редагувати товар</h3>

<div class="grid-container">
    <div class="form-section">
        <h4 class="form-section-title">Основні дані</h4>

        <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Назва:</label>
                <InputText id="name" @bind-Value="product.Name" class="form-control" />
            </div>

            <div class="form-group">
                <label for="description">Опис:</label>
                <InputTextArea id="description" @bind-Value="product.Description" class="form-control" />
            </div>

            <div class="form-group">
                <label for="price">Ціна:</label>
                <InputNumber id="price" @bind-Value="product.Price" class="form-control" />
            </div>

            <div class="form-group">
                <label for="action">Акція:</label>
                <InputNumber id="action" @bind-Value="product.Action" class="form-control" />
            </div>

            <div class="form-group">
                <label for="categoryId">Категорія:</label>
                <InputSelect id="categoryId" @bind-Value="product.CategoryId" class="form-control" @key="BlazorService.Categories">
                    @foreach (var category in BlazorService.Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label for="sellerId">Продавець:</label>
                <InputSelect id="sellerId" @bind-Value="product.SellerId" class="form-control" @key="BlazorService.Sellers">
                    @foreach (var seller in BlazorService.Sellers)
                    {
                        <option value="@seller.Id">@seller.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label for="typeItemId">Тип товару:</label>
                <InputSelect id="typeItemId" @bind-Value="product.TypeItemId" class="form-control" @key="BlazorService.TypeItems">
                    @foreach (var typeItem in BlazorService.TypeItems)
                    {
                        <option value="@typeItem.Id">@typeItem.Name</option>
                    }
                </InputSelect>
            </div>

            @if (product.Seasons.Any())
            {
                <div class="form-group">
                    <label>Сезони</label>
                    <ul>
                        @foreach (var season in product.Seasons)
                        {
                            <li>
                                @season
                                <button type="button" @onclick="() => RemoveSeason(season)">Видалити</button>
                            </li>
                        }
                    </ul>
                </div>
            }
            <div class="form-group">
                <button type="button" @onclick="OpenAddSeason">Add Season</button>
            </div>

            @if (product.Sizes.Any())
            {
                <div class="form-group">
                    <label>Розміри:</label>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Розмір</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var size in product.Sizes)
                            {
                                <tr>
                                    <td>@size</td>
                                    <td><button type="button" @onclick="() => RemoveSize(size)">Видалити</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
            }
            <div class="form-group">
                <button type="button" @onclick="OpenAddSize">Add Size</button>
            </div>

            @if (product.Colors.Any())
            {
                <div class="form-group">
                    <label>Кольори:</label>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var color in product.Colors)
                            {
                                <tr>
                                    <td style="background-color: @color; width: 100px; height: 30px;"></td>
                                    <td><button type="button" @onclick="() => RemoveColor(color)">Видалити</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <div class="form-group">
                <button type="button" @onclick="OpenAddColor">Add Color</button>
            </div>
            <AddModelPanel Label="@Label" IsVisible="@IsVisible" IsVisibleChanged="HandleIsVisibleChanged" OptionsList="@OptionsList"
                           OnOptionAdded="@OnOptionAdded" OnCancel="@Hide" DisplayType="@Type" />

            @if (showMessage)
            {
                <div class="alert alert-info" role="alert">
                    @message
                </div>
            }
            <button type="submit" class="btn btn-primary">Зберегти зміни</button>
        </EditForm>
    </div>

    <div class="image-management-section">
        <h4 class="form-section-title">Керування зображеннями</h4>
        <ImageManagement CurrentProduct="product" />
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    Product product = new();
    string? message;
    bool showMessage = false;

    protected override async Task OnInitializedAsync()
    {
        product = await ProductService.GetProductByIdAsync(Id);
    }


    private bool IsVisible { get; set; } = false;
    private string Label{ get; set; }
    private string Type { get; set; }
    private List<string> OptionsList { get; set; } = new List<string>();
    private Action<string> OnOptionAdded { get; set; }

    public void ShowModal(string label, List<string> optionsList, Action<string> onOptionAdded, string type = "text")
    {
        Label = label;
        OptionsList = optionsList ?? new List<string>();
        OnOptionAdded = onOptionAdded;
        IsVisible = true;
        Type = type;
    }

    void OpenAddColor() => ShowModal("Add Color", BlazorService.Colors.Select(c => c.Name).ToList(), AddColor, "color");
    void OpenAddSize() => ShowModal("Add Size", BlazorService.Sizes.Select(s => s.Name).ToList(), AddSize);
    void OpenAddSeason() => ShowModal("Add Season", BlazorService.Seasons.Select(s => s.Name).ToList(), AddSeason);

    private void AddColor(string color) => AddToListInProduct(color, product.Colors);
    private void AddSize(string size) => AddToListInProduct(size, product.Sizes);
    private void AddSeason(string season) => AddToListInProduct(season, product.Seasons);
    private void AddToListInProduct(string item, HashSet<string> list)
    {
        if (!string.IsNullOrWhiteSpace(item))
            list.Add(item);
    } 
    public void Hide() => IsVisible = false;
    void HandleIsVisibleChanged(bool isVisible) => IsVisible = isVisible;


    private async Task HandleValidSubmit()
    {
        if (await ProductService.UpdateProductAsync(product))
        {
            NavigationManager.NavigateTo("/ControlPanel");
        }
        else
        {
            message = "Змін не має";
            showMessage = !showMessage;
            StateHasChanged();
            await Task.Delay(2000);
            showMessage = !showMessage;
            StateHasChanged();
        }
    }


    private void RemoveSize(string size) => RemoveAndRefresh(product.Sizes, size);
    private void RemoveColor(string color) => RemoveAndRefresh(product.Colors, color);
    private void RemoveSeason(string season) => RemoveAndRefresh(product.Seasons, season);

    private void RemoveAndRefresh<T>(ICollection<T> collection, T item)
    {
        collection.Remove(item);
        StateHasChanged();
    }
}

