@inject BlazorService BlazorService
@inject IProduct ProductService
@inject IFilter FillterService
@page "/"

<PageTitle>...</PageTitle>
<div class="container">
    <div class="products-grid">
        @foreach (var (item, index) in (FillterService.activeFilter() ? FillterService.Products : BlazorService.Products).Select((value, index) => (value, index)))
        {
            <a href="/product/@item.Id" class="product-item">
                <AutoSliderImage Id="@item.Id" Index="@index" Images="@item.Images" />
            </a>
        }
    </div>


    <div class="filter-container">
        <div class="Fill">
            <div class="fil-container-season">
                @foreach (var item in BlazorService.Seasons)
                {
                    <label class="custom-checkbox" for="@item.Name">
                        <input class="custom-input" type="checkbox" id="@item.Name" value="@item.Id" onchange="@((ChangeEventArgs args) => FillSeason(item.Name, (bool)args.Value))" />
                        <span class="checkmark"></span>
                        @item.Name
                    </label>
                }
            </div>
        </div>

        <div class="Fill">
            @{
                var groupedItemsSizes = BlazorService.Sizes
                .Select((value, index) => new { Item = value, Index = index, Group = (index / 5) * 2 + ((index % 5 < 3) ? 0 : 1) })
                .GroupBy(x => x.Group)
                .Select(group => new { Group = group.Key, Items = group.Select(x => x.Item) })
                .ToList();

                foreach (var group in groupedItemsSizes)
                {
                    <div class="@(group.Group % 2 == 0 ? "fil-container-3" : "fil-container-2")">
                        @foreach (var item in group.Items)
                        {
                            <label class="custom-checkbox" for="@item.Name">
                                <input class="custom-input" type="checkbox" id="@item.Name" value="@item.Id" onchange="@((ChangeEventArgs args) => FillSize(item.Name, (bool)args.Value))" />
                                <span class="checkmark"></span>
                                @item.Name
                            </label>
                        }
                    </div>
                }
            }
        </div>

        <div class="Fill">
            @{
                var groupedItemsCategories = BlazorService.Categories
                .Select((value, index) => new { Item = value, Index = index, Group = (index / 5) * 2 + ((index % 5 < 3) ? 0 : 1) })
                .GroupBy(x => x.Group)
                .Select(group => new { Group = group.Key, Items = group.Select(x => x.Item) })
                .ToList();

                foreach (var group in groupedItemsCategories)
                {
                    <div class="@(group.Group % 2 == 0 ? "fil-container-3" : "fil-container-2")">
                        @foreach (var item in group.Items)
                        {
                            <label class="custom-checkbox" for="@item.Name">
                                <input class="custom-input" type="checkbox" id="@item.Name" value="@item.Id" onchange="@((ChangeEventArgs args) => FillCategory(item.Name, (bool)args.Value))" />
                                <span class="checkmark"></span>
                                @item.Name
                            </label>
                        }
                    </div>
                }
            }
        </div>

        <div class="Fill">
            @{
                var groupedItemsColors = BlazorService.Colors
                .Select((value, index) => new { Item = value, Index = index, Group = (index / 7) * 2 + ((index % 7 < 4) ? 0 : 1) })
                .GroupBy(x => x.Group)
                .Select(group => new { Group = group.Key, Items = group.Select(x => x.Item) })
                .ToList();

                foreach (var group in groupedItemsColors)
                {
                    <div class="@(group.Group % 2 == 0 ? "fil-container-4" : "fil-container-3")">
                        @foreach (var item in group.Items)
                        {
                            <label class="color-checkbox" for="@item.Name">
                                <input class="color-input" type="checkbox" id="@item.Name" value="@item.Id" onchange="@((ChangeEventArgs args) => FillColor(item.Name, (bool)args.Value))" />
                                <span class="color-checkmark" style="background-color: @item.Name;"></span>
                            </label>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnFilterChanged { get; set; }

    private bool showMoreCategories = false;
    private void ToggleMoreCategories()
    {
        showMoreCategories = !showMoreCategories;
    }
    private bool showMoreColors = false;
    private void ToggleMoreColors()
    {
        showMoreColors = !showMoreColors;
    }
    private bool showMoreSeasons = false;
    private void ToggleMoreSeasons()
    {
        showMoreSeasons = !showMoreSeasons;
    }

    protected override void OnInitialized()
    {
        FillterService.ClearFilters();
        StateHasChanged();
    }



    private async Task FillCategory(string category, bool value)
    {
        await FillterService.FillCategory(category, value);
        StateHasChanged();
    }
    private async Task FillColor(string color, bool value)
    {
        await FillterService.FillColor(color, value);
        StateHasChanged();
    }
    private async Task FillSeason(string season, bool value)
    {
        await FillterService.FillSeason(season, value);
        StateHasChanged();
    }
    private async Task FillSize(string size, bool value)
    {
        await FillterService.FillSize(size, value);
        StateHasChanged();
    }
}
