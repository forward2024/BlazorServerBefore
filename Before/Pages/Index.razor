@implements IDisposable
@inject BlazorService BlazorService
@inject IProduct ProductService
@inject IFillter FillterService
@page "/"

<PageTitle>...</PageTitle>
<div class="container">
    <div class="products-grid">
        @foreach (var (item, index) in BlazorService.Products.Select((value, index) => (value, index)))
        {
            <a href="/product/@item.Id" class="product-item">
                <AutoSliderImage Id="@item.Id" Index="@index" Images="@item.Images" />
            </a>
        }
    </div>


    <div class="filter-container">
        <div class="FillSeason">
            <div class="seasons-container">
                @foreach (var item in BlazorService.Seasons)
                {
                    <div class="box_season">
                        <label class="custom-checkbox" for="@item.Name">
                            <input class="custom-input" type="checkbox" value="@item.Id" id="@item.Name" onchange="@((ChangeEventArgs args) => FillSeason(item.Name, (bool)args.Value))" />
                            <span class="custom-checkmark">
                                <span class="custom-checkmark-inner"></span>
                                <span class="custom-checkmark-inner"></span>
                            </span>
                            @item.Name
                        </label>
                    </div>
                }
            </div>
        </div>

        <div class="FillCategories">
            <div class="categories-container">
                @foreach (var (item, index) in BlazorService.Categories.Select((value, index) => (value, index)))
                {
                    <div class="box_category @(index <= 2 ? "" : "form-check") @(showMoreCategories && index >= 2 ? "show-categories" : "")" style="--index: @(index - 2)">
                        <label class="custom-checkbox" for="@item.Name">
                            <input class="custom-input" type="checkbox" value="@item.Id" id="@item.Name" onchange="@((ChangeEventArgs args) => FillCategory(item.Name, (bool)args.Value))" />
                            <span class="custom-checkmark">
                                <span class="custom-checkmark-inner"></span>
                                <span class="custom-checkmark-inner"></span>
                            </span>
                            @item.Name
                        </label>
                    </div>
                }
            </div>
            <div class="dropdown-footer">
                <button class="reset-btn  but-category" @onclick="ToggleMoreCategories">
                    @if (showMoreCategories)
                    {
                        <svg style="transform: rotate(180deg);" xmlns="http://www.w3.org/2000/svg" class="ionicon" viewBox="0 0 512 512">
                            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="48" d="M112 184l144 144 144-144" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="ionicon" viewBox="0 0 512 512">
                            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="48" d="M112 184l144 144 144-144" />
                        </svg>
                    }
                    Категорії
                </button>
            </div>
        </div>

        <div class="FillColors">
            <div class="colors-container">
                @foreach (var (item, index) in BlazorService.Colors.Select((value, index) => (value, index)))
                {
                    <div class="box_color @(index < 6 ? "" : "form-check") @(showMoreColors && index >= 6 ? "show-colors" : "")" style="--index: @(index-6)">
                        <div class="color-container">
                            <input style="background-color: @item.Name;" class="color-checkbox" type="checkbox" value="@item.Id" id="@item.Name" onchange="@((ChangeEventArgs args) => FillColor(item.Name, (bool)args.Value))" />
                        </div>
                    </div>
                }
            </div>
            <div class="dropdown-footer">
                <button class="reset-btn" @onclick="ToggleMoreColors">
                    @if (showMoreColors)
                    {
                        <svg style="transform: rotate(180deg);" xmlns="http://www.w3.org/2000/svg" class="ionicon" viewBox="0 0 512 512">
                            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="48" d="M112 184l144 144 144-144" />
                        </svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" class="ionicon" viewBox="0 0 512 512">
                            <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="48" d="M112 184l144 144 144-144" />
                        </svg>
                    }
                    Кольори
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnFilterChanged { get; set; }

    private bool showMoreCategories = false;
    private void ToggleMoreCategories()
    {
        showMoreCategories = !showMoreCategories;
    }
    private bool showMoreColors = false;
    private void ToggleMoreColors()
    {
        showMoreColors = !showMoreColors;
    }
    private bool showMoreSeasons = false;
    private void ToggleMoreSeasons()
    {
        showMoreSeasons = !showMoreSeasons;
    }

    protected override async Task OnInitializedAsync()
    {
        BlazorService.ProductAdded += UpdateItems;
        StateHasChanged();
    }

    private async Task FillTypeItems(string type, bool value)
    {
        await FillterService.FillTypeItems(type, value);
        await OnFilterChanged.InvokeAsync();
    }
    private async Task FillCategory(string category, bool value)
    {
        await FillterService.FillCategory(category, value);
        await OnFilterChanged.InvokeAsync();
    }
    private async Task FillColor(string color, bool value)
    {
        await FillterService.FillColor(color, value);
        await OnFilterChanged.InvokeAsync();
    }
    private async Task FillSeason(string season, bool value)
    {
        await FillterService.FillSeason(season, value);
        await OnFilterChanged.InvokeAsync();
    }

    private async void UpdateItems()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BlazorService.ProductAdded -= UpdateItems;
    }
}
