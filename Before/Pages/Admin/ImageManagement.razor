@using System.Text;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject BlazorService BlazorService
@inject IProduct ProductService
@inject IJSRuntime JS

<div class="form">
    <div class="image_container">
        @foreach (var image in CurrentProduct.Images)
        {
            <div class="image_item">
                <img src="@image" />
                <div class="button_container">
                    <button @onclick="(() => DeleteImage(image))">Видалити</button>
                    <button @onclick="(() => SwapImages(image))">На першу позицію</button>
                </div>
            </div>
        }
    </div>
    <div class="form-group">
        <label for="imageFiles">Image Files:</label>
        <InputFile id="imageFiles" multiple OnChange="@OnImageFilesSelected" />
    </div>
    @if (selectedFiles.Any())
    {
        <button type="submit" @onclick="Changed" class="submit-btn">Добавить</button>
    }
</div>
@foreach (var file in selectedFiles)
{
    <p>@file.Name - @file.Size.ToString() bytes</p>
}

@code {
    [Parameter] public Product CurrentProduct { get; set; }

    private List<IBrowserFile> selectedFiles = new List<IBrowserFile>();


    private async Task Changed()
    {
        foreach (var file in selectedFiles)
        {
            var imageBuilder = new StringBuilder();
            imageBuilder.Append($"data:{file.ContentType};base64,");

            using (var stream = file.OpenReadStream())
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var base64Str = Convert.ToBase64String(memoryStream.ToArray());
                imageBuilder.Append(base64Str);
            }
            CurrentProduct.Images.Add(imageBuilder.ToString());
        }
        selectedFiles.Clear();
    }



    private async Task OnImageFilesSelected(InputFileChangeEventArgs e)
    {
        selectedFiles.Clear();
        selectedFiles.AddRange(e.GetMultipleFiles(20));
        StateHasChanged();
    }


    private async Task DeleteImage(string image)
    {
        CurrentProduct.Images.Remove(image);
    }

    private async Task SwapImages(string image)
    {
        if (CurrentProduct.Images.Remove(image))
        {
            CurrentProduct.Images.Insert(0, image);
            await ProductService.SwapImagesInMongoDB(CurrentProduct.Id, image);
        }
        StateHasChanged();
    }
}
